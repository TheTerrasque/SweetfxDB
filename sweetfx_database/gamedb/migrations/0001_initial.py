# Generated by Django 2.2.6 on 2019-10-10 19:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import sweetfx_database.gamedb.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('downloads', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, help_text='The name of the game', max_length=50)),
                ('url', models.URLField(blank=True, help_text='Home page for the game')),
                ('exename', models.CharField(blank=True, help_text='Name of the executable for this game', max_length=20)),
                ('added', models.DateField(auto_now_add=True)),
                ('visible', models.BooleanField(blank=True, db_index=True, default=True)),
                ('sweetfx_notes', models.TextField(blank=True, help_text='Any general SweetFX notes about this game')),
                ('preset_count', models.IntegerField(default=0)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['title'],
            },
            bases=(sweetfx_database.gamedb.models.RenderMixin, models.Model),
            managers=[
                ('active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Preset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The name of the preset', max_length=40)),
                ('added', models.DateField(auto_now_add=True)),
                ('updated', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('settings_text', models.TextField(help_text='The actual preset settings')),
                ('visible', models.BooleanField(blank=True, db_index=True, default=True, help_text='Display the preset on the game page')),
                ('downloads', models.IntegerField(db_index=True, default=0)),
                ('screenshot_count', models.IntegerField(default=0)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamedb.Game')),
            ],
            options={
                'ordering': ['title', 'id'],
            },
            bases=(sweetfx_database.gamedb.models.RenderMixin, models.Model),
            managers=[
                ('active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='UserComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('visible', models.BooleanField(blank=True, default=True)),
                ('object_id', models.PositiveIntegerField(db_index=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Shader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('url', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('download', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='downloads.DownloadFile')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(sweetfx_database.gamedb.models.RenderMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PresetScreenshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(height_field='image_height', help_text='The main image, the screenshot itself', upload_to='presetscreenshots', verbose_name='SweetFX image', width_field='image_width')),
                ('image_height', models.IntegerField(default=0)),
                ('image_width', models.IntegerField(default=0)),
                ('comparison_image', models.ImageField(blank=True, help_text='Optional comparison image, where SweetFX is OFF', null=True, upload_to='presetscreenshotscompare')),
                ('sweetfx_state', models.IntegerField(choices=[(2, 'Split screen'), (3, 'Enabled')], help_text='What state SweetFX is in the main image')),
                ('description', models.TextField(blank=True)),
                ('visible', models.BooleanField(blank=True, db_index=True, default=True, help_text='Display the screenshot on the preset page')),
                ('medium_thumb', models.ImageField(upload_to='medthumb')),
                ('medium_thumb_compared', models.ImageField(blank=True, null=True, upload_to='medthumb')),
                ('small_thumb', models.ImageField(upload_to='smallthumb')),
                ('created', models.DateField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('preset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamedb.Preset')),
            ],
            options={
                'ordering': ['-id'],
            },
            bases=(sweetfx_database.gamedb.models.RenderMixin, models.Model),
            managers=[
                ('active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='preset',
            name='shader',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gamedb.Shader'),
        ),
    ]
